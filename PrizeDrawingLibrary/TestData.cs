using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using Windows.Storage;

namespace PrizeDrawingLibrary
{
   public class TestData
    {
        ObservableCollection<Person> _testDataPersonsReadFromXMLFile = new ObservableCollection<Person>();

        /// <summary>
        /// Get and set
        /// </summary>
        public ObservableCollection<Person> TestDataPersonsReadFromXMLFile { get => _testDataPersonsReadFromXMLFile; set => _testDataPersonsReadFromXMLFile = value; }

        /// <summary>
        /// Loads an xml file with 100 autogenerated test persons
        /// </summary>
        public async void LoadTestDataPersonsFromXMLFile()
        {
            await Task.Run(async () =>
            {
                try
                {
                    string fname = @"Assets\data.xml";
                    StorageFolder InstallationFolder = Windows.ApplicationModel.Package.Current.InstalledLocation;
                    StorageFile file = await InstallationFolder.GetFileAsync(fname);

                    var xmlDoc = XDocument.Load(file.Path);
                    Debug.Write(file.Path);
                    foreach (XElement xe in xmlDoc.Root.Elements("Person"))
                    {
                        TestDataPersonsReadFromXMLFile.Add(new Person
                               (xe.Element("FirstName").Value,
                               xe.Element("SurName").Value,
                               xe.Element("Email").Value,
                               xe.Element("PhoneNumber").Value,
                               xe.Element("DateOfBirth").Value,
                               xe.Element("Serial").Value));
                    }
                }
                catch (FileNotFoundException e)
                {
                    Debug.Write(e);


                } catch (NullReferenceException e)
                {
                    Debug.Write(e);
                }

            });
        }

    }
}
